{"version":3,"sources":["components/LocalCounter.js","constants/actionTypes.js","middleware.js","reducer.js","reducers/counter.js","reducers/theme.js","store.js","components/Counter.js","components/ToggleThemeButton.js","components/Home.js","components/About.js","components/Header.js","components/Layout.js","App.js","serviceWorker.js","index.js"],"names":["LocalCounter","useState","count","setCount","onClick","TOGGLE_THEME","INCREMENT","DECREMENT","applyMiddleware","dispatch","action","counter","state","type","theme","Context","createContext","useStore","useContext","Counter","ToggleThemeButton","Home","About","Header","to","Layout","children","App","className","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","value","Object","assign","keys","reducer","map","k","useReducer","apply","forEach","vKey","Provider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iTAGe,SAASA,IAAe,IAAD,EACRC,mBAAS,GADD,mBAC3BC,EAD2B,KACpBC,EADoB,KAGlC,OACI,6BACI,6CACA,4BAAKD,GACL,4BAAQE,QAAS,kBAAMD,EAASD,EAAQ,KAAxC,aACA,4BAAQE,QAAS,kBAAMD,EAASD,EAAQ,KAAxC,cCXL,IAEMG,EAAe,eAEfC,EAAY,YACZC,EAAY,Y,gBCLZC,EAAkB,SAAAC,GAAQ,OAAI,SAAAC,GACvCD,EAASC,KCEE,GAEXC,QAAS,CCAE,SAACC,EAAOF,GACnB,OAAOA,EAAOG,MACV,KAAKP,EACD,OAAOM,EAAQ,EACnB,KAAKL,EACD,OAAOK,EAAQ,EACnB,QACI,OAAOA,IDPI,GACnBE,MAAO,CEFI,SAACF,EAAD,GACX,OAD8B,EAAVC,MAEhB,KAAKR,EACD,OAAQO,EACZ,QACI,OAAOA,KFHA,IGANG,EAAUC,0BAiBhB,IAAOC,EAAW,kBAAMC,qBAAWH,IClB3B,SAASI,IAAU,IACtBR,EAAYM,IAAZN,QAER,OACI,6BACI,8CACA,4BAAKA,EAAQC,OAEb,4BAAQR,QAAS,kBAAMO,EAAQF,SAAS,CAACI,KAAMP,MAA/C,aACA,4BAAQF,QAAS,kBAAMO,EAAQF,SAAS,CAACI,KAAMN,MAA/C,cCTG,SAASa,IAAoB,IAChCN,EAAUG,IAAVH,MAER,OACI,4BAAQV,QAAS,kBAAMU,EAAML,SAAS,CAACI,KAAMR,MAA7C,gBCHO,SAASgB,IACpB,OACI,6BACI,oCAEA,kBAACD,EAAD,MAEA,kBAACD,EAAD,MAEA,kBAACA,EAAD,MAEA,kBAACnB,EAAD,OCfG,SAASsB,IACpB,OACI,6BACI,sC,WCCG,SAASC,IAAS,IACrBT,EAAUG,IAAVH,MAER,OACI,gCACI,sCAAYA,EAAMF,MAAQ,QAAU,QAEpC,6BACI,kBAAC,IAAD,CAAMY,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,WCXD,SAASC,EAAT,GAA4B,IAAXC,EAAU,EAAVA,SAC5B,OACI,6BACI,kBAACH,EAAD,MACA,6BACKG,ICcFC,MAdf,WAEI,OACI,yBAAKC,UAAU,OACX,kBAACH,EAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,IAAIC,UAAWV,IACjC,kBAAC,IAAD,CAAOS,KAAK,SAASC,UAAWT,QCJhCU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACL,kBTFW,YAA8B,IAAXZ,EAAU,EAAVA,SACxBa,EAAQC,OAAOC,OAAP,MAAAD,OAAM,CAAQ,IAAR,mBAAeA,OAAOE,KAAKC,GAASC,IAAI,SAAAC,GAAC,sBAAOA,EAAIC,aAAWC,MAAM,KAAMJ,EAAQE,UAOvG,OALAL,OAAOE,KAAKH,GAAOS,QAAQ,SAAAC,GAAS,IAAD,cACPV,EAAMU,GADC,GAC1BrC,EAD0B,KACnBH,EADmB,KAE/B8B,EAAMU,GAAQ,CAACrC,QAAOH,SAAUD,EAAgBC,MAIhD,kBAACM,EAAQmC,SAAT,CAAkBX,MAAOA,GACpBb,ISRT,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOI,KAAK,IAAIC,UAAWJ,OAIxCwB,SAASC,eAAe,SDgHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ed810073.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\n\nexport default function LocalCounter(){\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <h2>Local Counter</h2>\n            <h3>{count}</h3>\n            <button onClick={() => setCount(count + 1)}>Increment</button>\n            <button onClick={() => setCount(count - 1)}>Decrement</button>\n        </div>\n    )\n}","export const INIT = 'INIT';\n\nexport const TOGGLE_THEME = 'TOGGLE_THEME';\n\nexport const INCREMENT = 'INCREMENT';\nexport const DECREMENT = 'DECREMENT';","export const applyMiddleware = dispatch => action => {\n    dispatch(action)\n};","import counter from './reducers/counter';\nimport theme from './reducers/theme';\n\nexport default {\n    //reducer: [reducer, intialState]\n    counter: [counter, 0],\n    theme: [theme, true]\n}","import {\n    INCREMENT,\n    DECREMENT\n} from '../constants/actionTypes';\n\nexport default (state, action) => {\n    switch(action.type){\n        case INCREMENT:\n            return state + 1;\n        case DECREMENT:\n            return state - 1;\n        default:\n            return state;\n    }\n}","import {\n    TOGGLE_THEME\n} from '../constants/actionTypes';\n\nexport default (state, {type}) => {\n    switch(type){\n        case TOGGLE_THEME:\n            return !state;\n        default:\n            return state;\n    }\n}","import React, { createContext, useContext, useReducer } from 'react';\n\nimport { applyMiddleware } from './middleware';\n\nimport reducer from './reducer';\n\nexport const Context = createContext();\n\nexport default function Provider({children}){\n    const value = Object.assign({}, ...Object.keys(reducer).map(k => ({[k]: useReducer.apply(null, reducer[k])})));\n\n    Object.keys(value).forEach(vKey => {\n        let [state, dispatch] = value[vKey];\n        value[vKey] = {state, dispatch: applyMiddleware(dispatch)}\n    });\n\n    return (\n        <Context.Provider value={value}>\n            {children}\n        </Context.Provider>\n    )\n};\n\nexport const  useStore = () => useContext(Context);","import React from 'react';\n\nimport { INCREMENT, DECREMENT } from '../constants/actionTypes';\nimport { useStore } from '../store';\n\nexport default function Counter(){\n    const { counter } = useStore();\n\n    return (\n        <div>\n            <h2>Global Counter</h2>\n            <h3>{counter.state}</h3>\n\n            <button onClick={() => counter.dispatch({type: INCREMENT})}>Increment</button>\n            <button onClick={() => counter.dispatch({type: DECREMENT})}>Decrement</button>\n        </div>\n    );\n}","import React from 'react';\n\nimport { TOGGLE_THEME } from '../constants/actionTypes';\nimport { useStore } from '../store';\n\nexport default function ToggleThemeButton(){\n    const { theme } = useStore();\n\n    return (\n        <button onClick={() => theme.dispatch({type: TOGGLE_THEME})}>Change Theme</button>\n    )\n}","import React from 'react';\n\nimport LocalCounter from './LocalCounter';\nimport Counter from './Counter';\nimport ToggleThemeButton from './ToggleThemeButton';\n\nexport default function Home(){\n    return (\n        <div>\n            <h1>Home</h1>\n\n            <ToggleThemeButton />\n\n            <Counter />\n\n            <Counter />\n\n            <LocalCounter />\n        </div>\n    )\n}","import React from 'react';\n\nexport default function About(){\n    return (\n        <div>\n            <h1>About</h1>\n        </div>\n    )\n}","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport { useStore } from '../store';\n\nexport default function Header(){\n    const { theme } = useStore();\n    \n    return (\n        <header>\n            <h2>Theme: {theme.state ? 'Light' : 'Dark'}</h2>\n\n            <nav>\n                <Link to=\"/\">Home</Link>\n                <Link to=\"/about\">About</Link>\n            </nav>\n        </header>\n    )\n}","import React from 'react';\n\nimport Header from './Header';\n\nexport default function Layout({children}){\n    return (\n        <div>\n            <Header />\n            <div>\n                {children}\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport './App.css';\n\nimport Home from './components/Home';\nimport About from './components/About';\n\nimport Layout from './components/Layout';\n\nfunction App() {\n\n    return (\n        <div className=\"app\">\n            <Layout>\n                <Switch>\n                    <Route exact path=\"/\" component={Home}></Route>\n                    <Route path=\"/about\" component={About}></Route>\n                </Switch>\n            </Layout>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Provider from './store';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((\n    <Provider>\n        <Router>\n            <Switch>\n                <Route path=\"/\" component={App} />\n            </Switch>\n        </Router>\n    </Provider>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}