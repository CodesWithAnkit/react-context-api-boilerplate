{"version":3,"sources":["logo.svg","constants/actionTypes.js","reducers/counter.js","context/CounterContext.js","components/IncrementButton.js","components/DecrementButton.js","components/Counter.js","App.js","reducers/auth.js","context/AuthContext.js","serviceWorker.js","index.js","provider.js"],"names":["module","exports","INCREMENT","DECREMENT","state","action","type","initialState","CounterContext","createContext","CounterProvider","children","Provider","value","useReducer","counterReducer","useContextState","useContext","IncrementButton","dispatch","count","onClick","Counter","App","className","src","logo","alt","isLoggedIn","user","payload","AuthContext","AuthProvider","authReducer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,wLCG9BC,EAAY,YACZC,EAAY,YCCV,WAACC,EAAOC,GACnB,OAAOA,EAAOC,MACV,KAAKJ,EACD,OAAOE,EAAQ,EACnB,KAAKD,EACD,OAAOC,EAAQ,EACnB,QACI,OAAOA,ICRbG,EAAe,EAERC,EAAiBC,0BAEf,SAASC,EAAT,GAAqC,IAAXC,EAAU,EAAVA,SACrC,OACI,kBAACH,EAAeI,SAAhB,CAAyBC,MAAOC,qBAAWC,EAAgBR,IACtDI,GAKN,IAAOK,EAAkB,kBAAMC,qBAAWT,ICXlC,SAASU,IAAkB,IAAD,EACTF,IADS,mBACrBG,GADqB,KAC7BC,MAD6B,MAGrC,OACI,4BAAQC,QAAS,kBAAMF,EAAS,CAACb,KAAMJ,MAAvC,aCJO,SAASgB,IAAkB,IAAD,EACTF,IADS,mBACrBG,GADqB,KAC7BC,MAD6B,MAGrC,OACI,4BAAQC,QAAS,kBAAMF,EAAS,CAACb,KAAMH,MAAvC,aCFO,SAASmB,IAAU,IAAD,EACHN,IADG,mBACtBZ,EADsB,UAG7B,OACI,6BACI,4BAAKA,GAEL,kBAACc,EAAD,MACA,kBAAC,EAAD,OCMGK,MAff,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SAEzC,kBAACL,EAAD,MAEA,kBAACA,EAAD,SCTO,WAAClB,EAAOC,GACnB,OAAOA,EAAOC,MACV,IPPa,QOQT,MAAO,CAACsB,YAAY,EAAMC,KAAMxB,EAAOyB,SAC3C,IPRc,SOSV,MAAO,CAACF,YAAY,EAAOC,KAAM,MACrC,QACI,OAAOzB,ICRbG,EAAe,CACjBqB,YAAY,EACZC,KAAM,MAGGE,EAActB,0BAEZ,SAASuB,EAAT,GAAkC,IAAXrB,EAAU,EAAVA,SAClC,OACI,kBAACoB,EAAYnB,SAAb,CAAsBC,MAAOC,qBAAWmB,EAAa1B,IAChDI,GCFOuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBCHW,gBAAE7B,EAAF,EAAEA,SAAF,OACX,kBAACqB,EAAD,KACI,kBAACtB,EAAD,KACKC,KDAT,KACI,kBAAC,EAAD,OAEL8B,SAASC,eAAe,SDsHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f1c514ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const LOGIN = 'LOGIN';\nexport const LOGOUT = 'LOGOUT';\n\nexport const INCREMENT = 'INCREMENT';\nexport const DECREMENT = 'DECREMENT';","import {\n    INCREMENT,\n    DECREMENT\n} from '../constants/actionTypes';\n\nexport default (state, action) => {\n    switch(action.type){\n        case INCREMENT:\n            return state + 1;\n        case DECREMENT:\n            return state - 1;\n        default:\n            return state;\n    }\n}","import React, { createContext, useContext, useReducer } from 'react';\n\nimport counterReducer from '../reducers/counter';\n\nconst initialState = 0;\n\nexport const CounterContext = createContext();\n\nexport default function CounterProvider({children}){\n    return (\n        <CounterContext.Provider value={useReducer(counterReducer, initialState)}>\n            {children}\n        </CounterContext.Provider>\n    )\n};\n\nexport const  useContextState = () => useContext(CounterContext);","import React from 'react';\n\nimport { INCREMENT } from '../constants/actionTypes';\nimport { useContextState } from '../context/CounterContext';\n\nexport default function IncrementButton(){\n    const [{count}, dispatch] = useContextState();\n\n    return (\n        <button onClick={() => dispatch({type: INCREMENT})}>Increment</button>\n    )\n}","import React from 'react';\n\nimport { DECREMENT } from '../constants/actionTypes';\nimport { useContextState } from '../context/CounterContext';\n\nexport default function IncrementButton(){\n    const [{count}, dispatch] = useContextState();\n\n    return (\n        <button onClick={() => dispatch({type: DECREMENT})}>Decrement</button>\n    )\n}","import React from 'react';\n\nimport IncrementButton from './IncrementButton';\nimport DecrementButton from './DecrementButton';\n\nimport { useContextState } from '../context/CounterContext';\n\nexport default function Counter(){\n    const [state, dispatch] = useContextState();\n\n    return (\n        <div>\n            <h1>{state}</h1>\n\n            <IncrementButton />\n            <DecrementButton />\n        </div>\n    );\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Counter from './components/Counter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n        <Counter />\n        \n        <Counter />\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import {\n    LOGIN,\n    LOGOUT\n} from '../constants/actionTypes';\n\nexport default (state, action) => {\n    switch(action.type){\n        case LOGIN:\n            return {isLoggedIn: true, user: action.payload};\n        case LOGOUT:\n            return {isLoggedIn: false, user: null}\n        default:\n            return state;\n    }\n}","import React, { createContext, useContext, useReducer } from 'react';\n\nimport authReducer from '../reducers/auth';\n\nconst initialState = {\n    isLoggedIn: false,\n    user: null\n};\n\nexport const AuthContext = createContext();\n\nexport default function AuthProvider({children}){\n    return (\n        <AuthContext.Provider value={useReducer(authReducer, initialState)}>\n            {children}\n        </AuthContext.Provider>\n    )\n};\n\nexport const useContextState = () => useContext(AuthContext);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Provider from './provider';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((\n    <Provider>\n        <App />\n    </Provider>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useReducer, createContext } from 'react';\n\nimport AuthProvider from './context/AuthContext';\nimport CounterProvider from './context/CounterContext';\n\nexport default ({children}) => (\n    <AuthProvider>\n        <CounterProvider>\n            {children}\n        </CounterProvider>\n    </AuthProvider>\n);"],"sourceRoot":""}